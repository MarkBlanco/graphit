element Vertex end
element Edge end

const edges : edgeset{Edge}(Vertex,Vertex, int) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const old_rank : vector{Vertex}(double) = 1.0/vertices.size();
const new_rank : vector{Vertex}(double) = 0.0;

const column_weights : vector {Vertex}(float) = 0;
const normalizedWeights : vector {Vertex}(float) = 0;

const contrib : vector{Vertex}(double) = 0.0;
const error : vector{Vertex}(double) = 0.0;
const damp : double = 0.85;
const beta_score : double = (1.0 - damp) / vertices.size();
const tolerance : float = 1e-4;
const MAX_ITER: int = 100;

func computeWeightSum(src : Vertex, dst : Vertex, weight:int)
    column_weights[dst]+=weight;
end



func computeContrib(v : Vertex)
    contrib[v] = old_rank[v] * normalizedWeights[v];
end

func updateEdge(src : Vertex, dst : Vertex, weight:int)
    new_rank[src] += contrib[dst]*weight;
end


func updateVertex(v : Vertex)
    var old_score : double = old_rank[v];
    new_rank[v] = beta_score + damp*(new_rank[v]);
    error[v] = fabs(new_rank[v] - old_rank[v]);
    old_rank[v] = new_rank[v];
    new_rank[v] = 0.0;
end

func printRank(v : Vertex)
    print old_rank[v];
end

func reset(v: Vertex)
    old_rank[v] = 1.0/vertices.size();
    new_rank[v] = 0.0;
    if(column_weights[v] > 0)
      normalizedWeights[v] = 1.0/column_weights[v];
    end

end

func resetError(v:Vertex)
    error[v] = 0;
end

func printWeight(v:Vertex)
  if(column_weights[v] > 1)
      print v;
  end
end

func main()
    edges.apply(computeWeightSum);
    for trail in 0:16
      	startTimer();
        vertices.apply(reset);
      	var i : int = 0;
        var cumm_error : double = 1.0;
        while(cumm_error> tolerance)
            cumm_error = 0.0;
            %vertices.apply(resetError);
      	    #s1# vertices.apply(computeContrib);
            #s1# edges.apply(updateEdge);
            #s1# vertices.apply(updateVertex);

            i = i+1;
            if(i <= MAX_ITER)
              cumm_error = error.sum();
            end
    %
        end
    %

      	var elapsed_time : double = stopTimer();
        print i;
      	print "elapsed time: ";
      	print elapsed_time;
    end


end

schedule:
    program->configApplyDirection("s1", "DensePull")->configApplyParallelization("s1","static-vertex-parallel");
