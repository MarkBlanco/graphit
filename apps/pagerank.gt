element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const old_rank : vector{Vertex}(double) = 1.0/vertices.size();
const new_rank : vector{Vertex}(double) = 0.0;
const out_degree : vector {Vertex}(int) = edges.getOutDegrees();
const contrib : vector{Vertex}(double) = 0.0;
const error : vector{Vertex}(double) = 0.0;
const damp : double = 0.85;
const beta_score : double = (1.0 - damp) / vertices.size();

const tolerance : float = 1e-4;
const MAX_ITER : int = 100;

func computeContrib(v : Vertex)
    contrib[v] = old_rank[v] / out_degree[v];
end

func updateEdge(src : Vertex, dst : Vertex)
    new_rank[dst] += contrib[src];
end

func updateVertex(v : Vertex)
    var old_score : double = old_rank[v];
    new_rank[v] = beta_score + damp*(new_rank[v]);
    error[v] = fabs(new_rank[v] - old_rank[v]);
    old_rank[v] = new_rank[v];
    new_rank[v] = 0.0;
end

func printRank(v : Vertex)
    print old_rank[v];
end

func reset(v: Vertex)
    old_rank[v] = 1.0/vertices.size();
    new_rank[v] = 0.0;
end

func main()
    for trail in 0:10
    	startTimer();
        vertices.apply(reset);

	var i : int = 0;
	var cumm_error : double = 1.0;
	
	while(cumm_error > tolerance)
	    cumm_error = 0.0;
    	    vertices.apply(computeContrib);
            #s1# edges.apply(updateEdge);
            vertices.apply(updateVertex);

	    if( i < MAX_ITER)
	    	cumm_error = error.sum();
	    end
	    i = i+1;
    	end

    	var elapsed_time : double = stopTimer();
    	print "elapsed time: ";
    	print elapsed_time;
	print i;
    end
end

% specify schedules here or use a separate schedule file
schedule:
    program->configApplyDirection("s1", "DensePull")->configApplyParallelization("s1","static-vertex-parallel");
